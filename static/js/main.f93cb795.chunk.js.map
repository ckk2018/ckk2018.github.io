{"version":3,"sources":["assets/imgs/planets/Earth.png","threeMap.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","ThreeMap","containerRef","useRef","useEffect","container","stats","camera","scene","renderer","group","width","clientWidth","height","clientHeight","THREE","add","position","x","y","z","lookAt","ambi","spotLight","set","intensity","loader","planetTexture","require","load","texture","geometry","material","map","mesh","setClearColor","setPixelRatio","window","devicePixelRatio","setSize","appendChild","domElement","OrbitControls","autoRotate","Stats","dom","_init","requestAnimationFrame","_animate","rotation","render","update","initThree","current","id","ref","App","className","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,mC,uICM3C,SAASC,IACL,IAAMC,EAAeC,mBA4ErB,OA1EAC,qBAAU,YAKV,SAAmBC,GACf,IAEIC,EACAC,EAAQC,EAAOC,EAAUC,EAHvBC,EAAQN,EAAUO,YAClBC,EAASR,EAAUS,cAOzB,WAEIN,EAAQ,IAAIO,QACZL,EAAQ,IAAIK,QACZP,EAAMQ,IAAIN,IAGVH,EAAS,IAAIQ,oBAAwB,GAAIJ,EAAQE,EAAQ,EAAG,MACrDI,SAASC,GAAK,GACrBX,EAAOU,SAASE,EAAI,GACpBZ,EAAOU,SAASG,EAAI,IACpBb,EAAOc,OAAOb,EAAMS,UAGpB,IAAMK,EAAO,IAAIP,eAAmB,SACpCP,EAAMQ,IAAIM,GACV,IAAMC,EAAY,IAAIR,mBAAuB,UAC7CQ,EAAUN,SAASO,IAAI,IAAK,IAAK,KACjCD,EAAUE,UAAY,GACtBjB,EAAMQ,IAAIO,GAGV,IAAMG,EAAS,IAAIX,gBACbY,EAAgBC,EAAQ,IAC9BF,EAAOG,KAAKF,GAAe,SAAAG,GACvB,IAAMC,EAAW,IAAIhB,iBAAqB,IAAK,GAAI,IAC7CiB,EAAW,IAAIjB,oBAAwB,CAACkB,IAAKH,IAC7CI,EAAO,IAAInB,OAAWgB,EAAUC,GACtCtB,EAAMM,IAAIkB,OAIdzB,EAAW,IAAIM,iBACNoB,cAAc,UACvB1B,EAAS2B,cAAcC,OAAOC,kBAC9B7B,EAAS8B,QAAQ5B,EAAOE,GACxBR,EAAUmC,YAAY/B,EAASgC,YAGT,IAAIC,IAAcnC,EAAQE,EAASgC,YAC3CE,YAAa,EAG3BrC,EAAQ,IAAIsC,IACZvC,EAAUmC,YAAYlC,EAAMuC,MA/ChCC,GACAC,uBAuDA,SAASC,IAJLtC,EAAMuC,SAAS9B,GAAK,KACpBV,EAASyC,OAAO1C,EAAOD,GAKvBD,EAAM6C,SACNJ,sBAAsBC,MApE1BI,CADqBlD,EAAamD,WAEnC,IAwEC,yBAAKC,GAAG,eAAeC,IAAKrD,ICjFpC,SAASsD,IACL,OACI,yBAAKC,UAAU,OACX,kBAACxD,EAAD,OCIZ,IAAMyD,EAAcC,QACS,cAA7BtB,OAAOuB,SAASC,UAEiB,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACzB,2DA6BJ,SAASC,EAAgBC,GACzBC,UAAUC,cACLC,SAASH,GACTI,MAAK,SAAAC,GACNA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACF,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,WAK5BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMnBC,OAAM,SAAAC,GACPH,QAAQG,MAAM,4CAA6CA,M,MChE/DC,IAAS9B,OACL,kBAACM,EAAD,MACAyB,SAASC,eAAe,SDYb,WACf,GAA6C,kBAAmBjB,UAAW,CAGvE,GADkB,IAAIkB,IAAIC,GAAwB/C,OAAOuB,UAC3CyB,SAAWhD,OAAOuB,SAASyB,OAIzC,OAGAhD,OAAOiD,iBAAiB,QAAQ,WAChC,IAAMtB,EAAK,UAAMoB,GAAN,sBAEN1B,EAwCT,SAAiCM,GAEjCuB,MAAMvB,GACDI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACnCA,EAAayB,aAAa1B,MAAK,WAC3B/B,OAAOuB,SAASmC,eAKpBhC,EAAgBC,MAGnBc,OAAM,WACPF,QAAQC,IACJ,oEAzDAmB,CAAwBhC,GAHxBD,EAAgBC,OCzBxBiC,K","file":"static/js/main.f93cb795.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Earth.5f4ff75c.png\";","import React, {useEffect, useRef} from 'react';\r\nimport * as THREE from 'three';\r\nimport OrbitControls from 'three-orbitcontrols';\r\nimport Stats from 'stats-js';\r\nimport './threeMap.css';\r\n\r\nfunction ThreeMap() {\r\n    const containerRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const containerDOM = containerRef.current;\r\n        initThree(containerDOM);\r\n    }, []);\r\n\r\n    function initThree(container) {\r\n        const width = container.clientWidth;\r\n        const height = container.clientHeight;\r\n        let stats;\r\n        let camera, scene, renderer, group;\r\n\r\n        _init();\r\n        requestAnimationFrame(_animate);\r\n\r\n        function _init() {\r\n            // 创建场景和group\r\n            scene = new THREE.Scene();\r\n            group = new THREE.Group();\r\n            scene.add(group);\r\n\r\n            // 创建相机\r\n            camera = new THREE.PerspectiveCamera(60, width / height, 1, 2000);\r\n            camera.position.x = -10;\r\n            camera.position.y = 15;\r\n            camera.position.z = 500;\r\n            camera.lookAt(scene.position);\r\n\r\n            // 添加光源: 环境光和点光源\r\n            const ambi = new THREE.AmbientLight(0x686868);\r\n            scene.add(ambi);\r\n            const spotLight = new THREE.DirectionalLight(0xffffff);\r\n            spotLight.position.set(550, 100, 550);\r\n            spotLight.intensity = 0.6;\r\n            scene.add(spotLight);\r\n\r\n            // 创建模型和材质\r\n            const loader = new THREE.TextureLoader();\r\n            const planetTexture = require(\"./assets/imgs/planets/Earth.png\");\r\n            loader.load(planetTexture, texture => {\r\n                const geometry = new THREE.SphereGeometry(200, 40, 40);\r\n                const material = new THREE.MeshBasicMaterial({map: texture});\r\n                const mesh = new THREE.Mesh(geometry, material);\r\n                group.add(mesh);\r\n            });\r\n\r\n            // 渲染\r\n            renderer = new THREE.WebGLRenderer();\r\n            renderer.setClearColor(0xffffff);\r\n            renderer.setPixelRatio(window.devicePixelRatio);\r\n            renderer.setSize(width, height);\r\n            container.appendChild(renderer.domElement);\r\n\r\n            // 鼠标交互\r\n            const orbitControls = new OrbitControls(camera, renderer.domElement);\r\n            orbitControls.autoRotate = false;\r\n\r\n            // 性能监控\r\n            stats = new Stats();\r\n            container.appendChild(stats.dom);\r\n        }\r\n\r\n        // 每帧的变化\r\n        function _render() {\r\n            group.rotation.y -= 0.001;\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        function _animate() {\r\n            _render();\r\n            stats.update();\r\n            requestAnimationFrame(_animate);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"WebGL-output\" ref={containerRef}></div>\r\n    );\r\n}\r\n\r\nexport {ThreeMap};\r\n","import React from 'react';\r\nimport {ThreeMap} from './threeMap';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <ThreeMap />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {App};\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\nwindow.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\nif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n    // Our service worker won't work if PUBLIC_URL is on a different origin\r\n    // from what our page is served on. This might happen if a CDN is used to\r\n    // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n    return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n    if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n    } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n    }\r\n    });\r\n}\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\nnavigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n    registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n        if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n            // At this point, the old content will have been purged and\r\n            // the fresh content will have been added to the cache.\r\n            // It's the perfect time to display a \"New content is\r\n            // available; please refresh.\" message in your web app.\r\n            console.log('New content is available; please refresh.');\r\n            } else {\r\n            // At this point, everything has been precached.\r\n            // It's the perfect time to display a\r\n            // \"Content is cached for offline use.\" message.\r\n            console.log('Content is cached for offline use.');\r\n            }\r\n        }\r\n        };\r\n    };\r\n    })\r\n    .catch(error => {\r\n    console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n// Check if the service worker can be found. If it can't reload the page.\r\nfetch(swUrl)\r\n    .then(response => {\r\n    // Ensure service worker exists, and that we really are getting a JS file.\r\n    if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n    ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister().then(() => {\r\n            window.location.reload();\r\n        });\r\n        });\r\n    } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n    }\r\n    })\r\n    .catch(() => {\r\n    console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n    );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\nif ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n    registration.unregister();\r\n    });\r\n}\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root'),\r\n);\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}